# Pass Variables in YAML pipeline
# Go to pipeline
# Select Variable group 
# Crete Variables Ex - "my-variable-group"

## Define variable in YAML pipeline which we created in Variable group

# The following examples demonstrates all three

#----------------------------------------------------------------------------------------------
# ---------------------------
# File: pass-variables-in-ci-cd.yml
# Purpose: Demonstrate defining variables from multiple sources
# ---------------------------

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  # 1. Inline variable
  - name: myvariable
    value: myvalue

  # 2. Variable group from Azure DevOps Library
  - group: my-variable-group

  # 3. Variable template (external YAML file)
  - template: demofolder/myvariabletemplate.yml

steps:
  - script: |
      echo "Inline variable: $(myvariable)"
      echo "Variable from group: $(groupVariableName)"       # Replace with actual variable name from group
      echo "Variable from template: $(templateVariableName)" # Replace with actual variable name from template
    displayName: "Print All Variables"


#----------------------------------------------------------------------------------------------
# Variables scope and use of variables at Global and Stage and Job level

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:         # Global level
  - name: globalvar
    value: global

stages:
  - stage: stageA
    displayName: Stage A
    variables:      # Stage level
      - name: stgAvar
        value: valuestg

    jobs:
      - job: JobA
        variables:  # Job level
          - name: Jobvar
            value: jobstg
        steps:
          - bash: |
              echo "Global variable: $(globalvar)"
              echo "Stage A variable: $(stgAvar)"
              echo "Job A variable: $(Jobvar)"

  - stage: stageB
    displayName: Stage B
    jobs:
      - job: privatevalue-jobs
        steps:
          - bash: |
              echo "Global variable: $(globalvar)"
              echo "Stage A variable: $(stgAvar)"   # WILL BE EMPTY
              echo "Job A variable: $(Jobvar)"     # WILL BE EMPTY

      - job: JobA
        steps:
          - bash: echo "##vso[task.setvariable variable=SharedValue;isOutput=true]HelloFromStageA"
            name: setOutput

        dependsOn: stageA
        variables:
          SharedValueFromStageA: $[ dependencies.stageA.outputs['JobA.setOutput.SharedValue'] ]
        steps:
          - bash: echo "Shared value: $(SharedValueFromStageA)"

